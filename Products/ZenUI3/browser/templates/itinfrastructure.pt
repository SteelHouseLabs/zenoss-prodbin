<!--
###########################################################################
#
# This program is part of Zenoss Core, an open source monitoring platform.
# Copyright (C) 2009, Zenoss Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# For complete information please visit: http://www.zenoss.com/oss/
#
###########################################################################
-->

<tal:block metal:use-macro="context/page_macros/base-new">

<tal:block metal:fill-slot="center_panel">
</tal:block>

<tal:block metal:fill-slot="script_layout">
<script>
Ext.onReady(function(){

var treesm = new Ext.tree.DefaultSelectionModel({
    listeners: {
        'selectionchange': function(sm, newnode, oldnode){
            var uid = newnode.attributes.uid;
            Zenoss.util.setContext(uid, 'device_grid', 'organizer_events');
        }
    }
});

function initializeTreeDrop(g) {
    var dz = new Ext.tree.TreeDropZone(g, {
        ddGroup: 'devicegriddd',
        getTargetFromEvent: function(e) {
            return e.getTarget('.x-tree-node-el');
        },
        onNodeOver : function(target, dd, e, data){ 
            // Return the class that makes the check mark
            return Ext.dd.DropZone.prototype.dropAllowed;
        },
        onNodeDrop: function(target, dd, e, data) {
            var nodeid = target.getAttribute('ext:tree-node-id'),
                tree = this.tree,
                targetnode = tree.getNodeById(nodeid),
                targetuid = targetnode.attributes.uid,
                devids = [];
            Ext.each(data.selections, function(r){
                devids.push(r.data.uid);
            });
            Ext.getCmp('device_grid').view.showLoadMask(true);
            Zenoss.remote.DeviceRouter.moveDevices({
                uids: devids,
                target: targetuid
            }, function(data){
                if(data.success) {
                    Ext.getCmp('device_grid').view.nonDisruptiveReset();
                    tree.update(data.tree);
                } else {
                    Ext.getCmp('device_grid').view.showLoadMask(false);
                }
            }, this);
        }
    });
}

var devtree = {
    xtype: 'HierarchyTreePanel',
    id: 'devices',
    searchField: true,
    directFn: Zenoss.remote.DeviceRouter.getTree,
    root: {
        id: 'Devices',
        uid: '/zport/dmd/Devices',
        text: 'Device Classes'
    },
    selModel: treesm,
    listeners: { render: initializeTreeDrop }
};

var grouptree = {
    xtype: 'HierarchyTreePanel',
    id: 'groups',
    searchField: false,
    directFn: Zenoss.remote.DeviceRouter.getTree,
    root: {
        id: 'Groups',
        uid: '/zport/dmd/Groups',
    },
    selectRootOnLoad: false,
    selModel: treesm,
    listeners: { render: initializeTreeDrop }
};

var loctree = {
    xtype: 'HierarchyTreePanel',
    id: 'locs',
    searchField: false,
    directFn: Zenoss.remote.DeviceRouter.getTree,
    root: {
        id: 'Locations',
        uid: '/zport/dmd/Locations',
    },
    selectRootOnLoad: false,
    selModel: treesm,
    listeners: { render: initializeTreeDrop }
};

var treecontainer = {
    items: [devtree, grouptree, loctree],
    autoScroll: true
};

Ext.getCmp('center_panel').add({
    id: 'center_panel_container',
    layout: 'border',
    defaults: {
        'border': false
    },
    items: [{
        id: 'master_panel',
        layout: 'fit',
        region: 'west',
        split: true,
        width: 275,
        items: [treecontainer]
    },{
        id: 'detail_panel',
        region: 'center',
        layout: 'card',
        activeItem: 0,
        split: true,
        items: [{
            xtype: 'DeviceGridPanel',
            ddGroup: 'devicegriddd',
            id: 'device_grid', 
            enableDrag: true,
            tbar: {
                xtype: 'largetoolbar',
                items: [{
                    xtype: 'eventrainbow',
                    id: 'organizer_events'
                }, '-', {
                    id: 'add-button',
                    iconCls: 'add'
                },{
                    id: 'delete-button', 
                    iconCls: 'delete'
                },{
                    id: 'set-button',
                    iconCls: 'set'
                }, {
                    id: 'adddevice-button',
                    iconCls: 'adddevice'
                }, '-', {
                    id: 'import-button',
                    iconCls: 'import'
                },{
                    id: 'export-button',
                    iconCls: 'export'
                },{
                    id: 'configure-button',
                    iconCls: 'configure'
                }]
            }
        }]
    }]
});


});
</script>
</tal:block>
</tal:block> <!-- metal:use-macro="context/page_macros/masterdetailsplit2" -->
