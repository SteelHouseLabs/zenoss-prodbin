<tal:block metal:use-macro="context/page_macros/masterdetail">

<tal:block metal:fill-slot="breadcrumbs">
<span metal:use-macro="here/miscmacros/macros/breadCrumbs" /> / Event History
</tal:block>

<tal:block metal:fill-slot="master_panel">
</tal:block>

<tal:block metal:fill-slot="detail_panel">
</tal:block>

<tal:block metal:fill-slot="script_beforeLayout">
<link rel="stylesheet"
    href="/zenui/js/livegrid/resources/css/ext-ux-livegrid.css"/>
<script type="text/javascript"
    src="/zenui/js/livegrid/livegrid-all-debug.js"></script>
<tal:block tal:content="structure provider:jssnippets"/>
<tal:block tal:content="structure provider:directapi"/>
</tal:block>

<tal:block metal:fill-slot="script_layout">
<!-- Template for rendering the detail pane -->
<form id="exportform" method="post" action="export">
    <input type="hidden" id="export_body" name="body"/>
</form>
<textarea class="dontexpand" style="display:none" id="detail_table_template">
<table>
    <tr><td class="dt">Device:</td> 
        <td><tpl if="device"><a href="{device_url}" 
                class="resource-link">{device}</a></tpl></td>
        </tr>
    <tr><td class="dt">Component:</td> 
        <td><tpl if="component">
            <a href="{component_url}" 
                class="resource-link">{component}</a></tpl></td>
        </tr>
    <tr><td class="dt">Event Class:</td> 
        <td><tpl if="eventClass"><a href="{eventClass_url}"
                class="resource-link">{eventClass}</a></tpl></td>
        </tr>
    <tr><td class="dt">Status:</td> <td>{eventState}</td></tr>
    <tr><td class="dt">Start Time:</td> <td>{firstTime}</td></tr>
    <tr><td class="dt">Stop Time:</td> <td>{lastTime}</td></tr>
    <tr><td class="dt">Count:</td> <td>{count}</td></tr>
</table>
</textarea>
<textarea class="dontexpand" style="display:none" id="log_table_template">
    <table>
    <tpl for="log">
    <tr><td class="time">{1} {0} said: </td>
        <td class="message">{2}</td></tr>
    </tpl>
    </table>
</textarea>
<textarea class="dontexpand" style="display:none" id="fullprop_table_template">
<table class="proptable">
    <tpl for="properties">
    <tr><td class="proptable_key">{key}</td>
        <td class="proptable_value">{value}</td></tr>
    </tpl>
</table>
</textarea>
<script tal:content="string:
    Ext.onReady(function(){
        Zenoss.env.EVENTSGRID_STATEID = 'histconsole';
    });
"></script>
<script>
Ext.onReady(function(){
    
    // Make severity filter show clear events by default
    var cds = Zenoss.env.COLUMN_DEFINITIONS;
    for (i=0;i<cds.length;i++) {
        var def = cds[i];
        if (def.id=='severity') {
            delete def.filter.source[5].checked;
            Zenoss.env.COLUMN_DEFINITIONS[i] = def;
        }
    }
    
    // Global dialogs, will be reused after first load
    var win,
    // Date renderer object, used throughout
        date_renderer = Ext.util.Format.dateRenderer(Zenoss.date.ISO8601Long),
    // Get references to the panels
        detail_panel = Ext.getCmp('detail_panel'),
        master_panel = Ext.getCmp('master_panel');

    master_panel.layout = 'border';

    // Make the detail panel collapsible
    detail_panel.animCollapse = false;
    detail_panel.collapsible = true;
    detail_panel.collapsed = true;
    
    /*
     * Assemble the parameters that define the grid state.
     */
    function getQueryParameters() {
        var grid = Ext.getCmp('events_grid'),
            sortInfo = grid.view.ds.sortInfo;
        grid.view.applyFilterParams({'params':sortInfo});
        return sortInfo;
    }

    /*
     * Assemble the parameters that define the records selected. This by
     * necessity includes query parameters, since ranges need row indices.
     */
    function getSelectionParameters() {
        var grid = Ext.getCmp('events_grid'),
            sm = grid.getSelectionModel(),
            ranges = sm.getPendingSelections(true),
            evids = [],
            sels = sm.getSelections();
        Ext.each(sels, function(record){
            evids[evids.length] = record.data.evid;
        });
        if (!ranges && !evids) return false;
        var params = {
            evids:evids,
            ranges:ranges,
            start:0,
            limit:null
        };
        Ext.apply(params, getQueryParameters());
        return params;
    }

    /*
     * Show the dialog that allows one to add an event.
     */
    function showClassifyDialog(e) {
        if(!win){
            win = new Ext.Window({
                title: 'Classify Events',
                width: 250,
                autoHeight: true,
                closeAction: 'hide',
                plain: true,
                items: [{
                    border: false,
                    frame: false,
                    autoHeight: true,
                    padding: 10,
                    style: {'font-size':'10pt'},
                    html: 'Select the event class with which'+
                          ' you want to associate these events.'
                },{
                padding: 10,
                frame: false,
                border: false,
                items: [{
                    xtype: 'combo',
                    store: Zenoss.env.EVENT_CLASSES,
                    typeAhead: true,
                    forceSelection: true,
                    triggerAction: 'all',
                    emptyText: 'Select an event class',
                    selectOnFocus: true,
                    id: 'evclass_combo'
                }]}],
                buttons: [{
                    text: 'Cancel',
                    handler: function(){
                        win.hide();
                    }
                },{
                    text: 'Submit',
                    handler: function(){
                        var cb = Ext.getCmp('evclass_combo'),
                            sm = grid.getSelectionModel(),
                            rs = sm.getSelections(),
                            evids = [];
                        Ext.each(rs, function(record){
                            evids[evids.length] = record.data.evid;
                        });
                        if (!evids.length) {
                            win.hide();
                            Ext.Msg.show({
                                title: 'Error',
                                msg: 'No events were selected.',
                                buttons: Ext.MessageBox.OK
                            })
                        } else {
                        Zenoss.remote.EventConsole.classify({
                            'evclass': cb.getValue(),
                            'evids': evids
                        }, function(result){
                            win.hide();
                            var title = result.success ?  
                                        'Classified':
                                        'Error';
                            Ext.MessageBox.show({
                                title: title,
                                msg: result.msg,
                                buttons: Ext.MessageBox.OK
                            })
                        });
                        }
                    }
                }
                ]
            })
        }
        win.show(this);
    }

    /*
     * Select all events with a given state.
     * This requires a call to the back end, since we don't know anything about
     * records that are outside the current buffer. So we let the server
     * perform a query to determine ranges, then we select the ranges.
     */
    function selectByState(state) {
        var params = {'state':state},
            grid = Ext.getCmp('events_grid');
        Ext.apply(params, getQueryParameters());
        Zenoss.remote.EventConsole.state_ranges(
            params,
            function(result) {
                var sm = grid.getSelectionModel();
                sm.clearSelections();
                Ext.each(result, function(range){
                    if (range.length==1) 
                        range[1] = grid.getStore().totalLength + 1;
                   sm.selectRange(range[0]-1, range[1]-1, true);
                });
            }
        );
    }

    // Get the container surrounding master/detail, for adding the toolbar
    var container = Ext.getCmp('center_panel_container');
    
    // Add a CSS class to scope some styles that affect other parts of the UI
    container.on('render', function(){container.el.addClass('zenui3')});

    // Add the toolbar to the container
    container.add(
        new Zenoss.LargeToolbar({
            region:'north',
            border: false,
            items: [{
                /*
                 * ClASSIFY BUTTON
                 */
                text: 'Classify',
                // We don't have an icon for this
                //iconCls: 'classify',
                handler: showClassifyDialog
            },{
                xtype: 'tbseparator'
            },{
                /*
                 * SELECT MENU
                 */
                text: 'Select',
                menu:{
                    xtype: 'menu',
                    items: [{
                        text: 'All',
                        handler: function(){
                            var grid = Ext.getCmp('events_grid'),
                                sm = grid.getSelectionModel();
                            sm.clearSelections();
                            sm.selectRange(0, grid.getStore().totalLength);
                        }
                    },{
                        text: 'None',
                        handler: function(){
                            var grid = Ext.getCmp('events_grid'),
                                sm = grid.getSelectionModel();
                            sm.clearSelections();
                        }
                    },{
                        text: 'New',
                        iconCls: 'unacknowledge',
                        handler: function(){
                            // New == 0
                            selectByState(0);
                        }
                    },{
                        text: 'Acknowledged',
                        iconCls: 'acknowledge',
                        handler: function(){
                            // Acknowledged == 1
                            selectByState(1);
                        }
                    },{
                        text: 'Suppressed',
                        iconCls: 'suppress',
                        handler: function(){
                            // Suppressed == 2
                            selectByState(2);
                        }
                    }
                    ]
                }
            },{
                /*
                 * FILTERS BUTTON
                 */
                id: 'showfilters',
                text: 'Filters',
                iconCls: 'filter',
                enableToggle: true,
                pressed: true,
                listeners: {
                    'toggle' : function(ob, on) {
                        if(on) grid.showFilters()
                        else grid.hideFilters()
                    }
                }
            },{
                text: 'Export',
                iconCls: 'export',
                menu: {
                items: [{
                    text: 'CSV',
                    handler: function(){
                        var state = Ext.getCmp('events_grid').getState(),
                            params = {
                                type: 'csv',
                                params: {
                                    fields: Ext.pluck(state.columns, 'id'),
                                    sort: state.sort.field,
                                    dir: state.sort.direction,
                                    params: state.filters.options
                                }
                            };
                        Ext.get('export_body').dom.value =
                            Ext.encode(params);
                        Ext.get('exportform').dom.submit();
                    }
                }]
                }
            },{
                text: 'Configure',
                iconCls: 'configure',
                menu: {
                    items: [{
                        id: 'rowcolors_checkitem',
                        xtype: 'menucheckitem',
                        text: 'Show severity row colors',
                        handler: function(checkitem) {
                            var checked = !checkitem.checked;
                            var view = Ext.getCmp('events_grid').getView();
                            view.toggleRowColors(checked);
                        }
                    }]
                }
            },{
                xtype: 'tbfill'
            },{
                id: 'lastupdated',
                xtype: 'tbtext',
                cls: 'lastupdated',
                text: ''
            },{
                xtype: 'refreshmenu',
                text: 'Refresh',
                handler: function(){
                    view = Ext.getCmp('events_grid').getView();
                    view.showLoadMask(true);
                    view.updateLiveRows(view.rowIndex, true, true);
                }
            },{
                text: 'Reset Grid',
                handler: function(){
                    Ext.Msg.show({
                        title: 'Confirm Reset',
                        msg: 'Are you sure you want to reset the grid? All'+
                              ' filters, column sizing, and column order '+
                              'will be lost.',
                        buttons: Ext.Msg.OKCANCEL,
                        fn: function(val){
                            if (val=='ok')
                                Ext.getCmp('events_grid').resetGrid();
                        }
                    });
                }
            }
            ]
        })
    );

    function doLastUpdated() {
        var box = Ext.getCmp('lastupdated'),
            dt = new Date(),
            dtext = dt.format('g:i:sA');
            box.setText('Last updated at ' + dtext);
    };

    // Add css class to collapsed splitbar element, for hidingz
    detail_panel.on('afterLayout', function(ob) {
        layout = ob.ownerCt.getLayout();
        splitbar = layout[detail_panel.region].getCollapsedEl();
        splitbar.addClass('toggle-managed-splitbar');
    });

    // View to render the grid
    var myView = new Zenoss.FilterGridView({
        nearLimit : 20,
        filterbutton: 'showfilters',
        rowcoloritem: 'rowcolors_checkitem',
        loadMask  : { msg :  'Loading. Please wait...' }
    });

    // Show filters by default on history console
    // State restoration occurs after render, so this won't persist if unwanted
    myView.on('render', function(){myView.showFilters()});
    
    // Store to hold the events data
    var console_store = new Ext.ux.grid.livegrid.Store({
        autoLoad: true,
        proxy: new Ext.data.DirectProxy({
            directFn:Zenoss.remote.EventConsole.query
        }),
        bufferSize: 100,
        sortInfo: {field:'lastTime', direction:'DESC'},
        reader: new Ext.ux.grid.livegrid.JsonReader({
            root: 'events',
            totalProperty: 'totalCount'
        }, [
        // List all possible columns. 
        // FIXME: This should come from the server.
            'dedupid',
            'evid',
            'device',
            'device_url',
            'component',
            'component_url',
            'summary',
            'eventState',
            'eventClass',
            'eventClass_url',
            'eventKey',
            'message',
            'eventClassKey',
            'eventGroup',
            'prodState',
            'suppid',
            'manager',
            'agent',
            'DeviceClass',
            'Location',
            'Systems',
            'DeviceGroups',
            'ipAddress',
            'facility',
            'priority',
            'ntevid',
            'ownerid',
            'clearid',
            'DevicePriority',
            'eventClassMapping',
            'monitor',
            {name:'count', type:'int'},
            {name:'severity', type:'int'},
            {name:'firstTime', type:'date', dateFormat:Zenoss.date.ISO8601Long},
            {name:'lastTime', type:'date', dateFormat:Zenoss.date.ISO8601Long},
            {name:'stateChange', type:'date',
                dateFormat:Zenoss.date.ISO8601Long}
        ])
    });

    // Selection model
    var console_selection_model = new Zenoss.ExtraHooksSelectionModel();

    // Pop open the event detail, depending on the number of rows selected
    function toggleEventDetailContent(){
        var count = console_selection_model.getCount();
        if (count==1) {
            showEventDetail(console_selection_model.getSelected());
        } else {
            wipeEventDetail();
        }
    }

    /*
     * THE GRID ITSELF!
     */
    var grid = new Zenoss.FilterGridPanel({
        region: 'center',
        id: 'events_grid',
        stateId: Zenoss.env.EVENTSGRID_STATEID,
        enableDragDrop: false,
        stateful: true,
        border: false,
        rowSelectorDepth: 5,
        autoExpandColumn: 'summary',
        store: console_store, // defined above
        view: myView, // defined above
        // Zenoss.env.COLUMN_DEFINITIONS comes from the server, and depends on
        // the resultFields associated with the context.
        cm: new Ext.grid.ColumnModel(Zenoss.env.COLUMN_DEFINITIONS),
        stripeRows: true,
        // Map some other keys
        keys: [{
        // Enter to pop open the detail panel
            key: Ext.EventObject.ENTER,
            fn: toggleEventDetailContent
        }],
        sm: console_selection_model // defined above
    });
    // Add it to the layout
    master_panel.add(grid);


    /*
     * DETAIL PANEL STUFF
     */

    // Pop open the event detail pane and populate it with the appropriate data
    // and switch triggers (single select repopulates detail, esc to close)
    function showEventDetail(r) {
        Ext.getCmp('dpanelcontainer').load(r.data.evid);
        grid.un('rowdblclick', toggleEventDetailContent);
        console_selection_model.on('rowselect', toggleEventDetailContent);
        detail_panel.expand();
        esckeymap.enable();
    }

    // Wipe event detail values
    function wipeEventDetail() {
        Ext.getCmp('dpanelcontainer').wipe()
    }

    // Collapse the event detail pane and switch triggers (double select
    // repopulates detail, esc no longer closes)
    function hideEventDetail() {
        detail_panel.collapse();
        console_selection_model.un('rowselect', toggleEventDetailContent);
        grid.on('rowdblclick', toggleEventDetailContent);
        esckeymap.disable();
    }
    
    // Finally, add the detail panel (have to do it after function defs to hook
    // up the hide callback)
    detail_panel.add({
        xtype:'detailpanel', 
        id: 'dpanelcontainer', 
        isHistory: true,
        onDetailHide: hideEventDetail
    });

    // Add the row info panel and bottom toolbar
    master_panel.add({
        xtype: 'toolbar',
        region: 'south',
        border: false,
        frame: false,
        style: {'border-top':'1px solid #888'},
        height: 25,
        items: [{
            xtype: 'tbtext',
            text: '<a href="viewEvents"'+'>Event Console...<'+'/a'+'>'
        },{
            xtype: 'tbfill'
        },{
            xtype: 'livegridinfo',
            text: '',
            grid: 'events_grid'
        }]
    });


    // Hook up the "Last Updated" text
    var store = grid.getStore(),
        view = grid.getView();
    store.on('load', doLastUpdated);
    view.on('buffer', doLastUpdated);

    // Detail pane should pop open when double-click on event
    grid.on("rowdblclick", toggleEventDetailContent);

    // When multiple events are selected, detail pane should blank
    console_selection_model.on('rangeselect', wipeEventDetail);

    // Key mapping for ESC to close detail pane
    var esckeymap = new Ext.KeyMap(document, {
        key: Ext.EventObject.ESC,
        fn: hideEventDetail
    });
    // Start disabled since pane is collapsed
    esckeymap.disable();

    // Size the content panel appropriate to the window size
    function maximizeContentPanel(){
        var pane = Ext.getCmp('viewport'),
            top = pane.getEl().getTop(),
            vh = Ext.getBody().getViewSize().height,
            MARGIN = 20;
        newY = vh - top - MARGIN;
        pane.setHeight(newY)
    }
    maximizeContentPanel();
    // Have this happen on window resize
    connect(currentWindow(), 'onresize', maximizeContentPanel);
});
</script>
</tal:block>

</tal:block>
