<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" xmlns:fc="http://www.adobe.com/2006/fc"
	 layout="absolute"
	 creationComplete="setup()" backgroundGradientColors="[#ffffff,#ffffff]">
	
	<fc:Roamer id="roamer" bottom="0" 
		itemRenderer="XMLItemView"
		repulsionFactor="{repulsion.value}" 
		maxDistanceFromCurrent="{maxDistanceFromCurrent.value}" 
		itemLimit="200"
		autoFit="{autoFit.selected}"
        tidyHistory="true"
		motionThreshold="0.3"
		right="0" left="0" top="0">

		<fc:removeItemEffect>
			<mx:Fade alphaFrom="1" alphaTo="0" duration="500"/>				
		</fc:removeItemEffect>
		
		<fc:addItemEffect>
			<mx:Fade alphaFrom="0" alphaTo="1" duration="500"/>
		</fc:addItemEffect>
	</fc:Roamer>
    <mx:HBox x="0" y="0" backgroundAlpha="0.8" width="100%"
    backgroundColor="0x444444" verticalAlign="middle" horizontalAlign="center">
    <mx:VBox horizontalAlign="center">
	<mx:HSlider width="133" id="maxDistanceFromCurrent"
        value="2" minimum="1" maximum="4" 
		liveDragging="true" snapInterval="1"/>
	<mx:Label text="Number of Hops" fontSize="9" 
              textAlign="center" color="#ffffff"/>
    </mx:VBox>
    <mx:VBox horizontalAlign="center">
	<mx:HSlider width="133" id="repulsion" value="{roamer.repulsionFactor}" minimum="0.01" maximum="1.5" liveDragging="true"/>
	<mx:Label text="Repulsion" fontSize="9" width="133" textAlign="center"
    color="#ffffff"/>
    </mx:VBox>
	<mx:CheckBox selected="false" id="autoFit" label="Fit to window"
    color="#ffffff" change="roamer.refresh()"/>
	<mx:Button id="fromSmallDataButton" label="Reset"
		click="initialData.send();" width="70" fontSize="9"/>
    </mx:HBox>

	<mx:HTTPService id="initialData" url="getXMLEdges"
        showBusyCursor="true" resultFormat="e4x" 
        result="gotData(['Node','Edge','fromID','toID'], event)">
        <mx:request>
            <depth>{maxDistanceFromCurrent.value}</depth>
        </mx:request>
    </mx:HTTPService>
	<mx:HTTPService id="moreData" url="/zport/dmd/getXMLEdges"
        showBusyCursor="true" resultFormat="e4x" 
        result="updateData(event)">
        <mx:request>
            <depth>{maxDistanceFromCurrent.value}</depth>
            <objid>{_nextItemName}</objid>
        </mx:request>
    </mx:HTTPService>

	
	<mx:Label x="150" y="121" text="*" color="#dddddd" id="currentDataIndicator"/>
	<mx:Script>
		<![CDATA[
			import com.adobe.flex.extras.controls.springgraph.SpringGraph;
			import mx.rpc.events.ResultEvent;
            import mx.collections.XMLListCollection;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;


            [Bindable]private var _nextItemName:String;
            /*
            [Bindable]private var _nodeList:XMLList;
            */
            [Bindable]private var _nodeList:XML;
            [Bindable]private var _currentItemID:String;
            [Bindable]private var _history:Array;

            public function log(msg:String): void {
            }

			private function setup(): void {
				initialData.send();
                roamer.motionThreshold = 0.3;
				roamer.repulsionFactor = 0.5;
				roamer.showHistory = true;
                log("Ready to go!");
			}
			
			private function gotData(xmlNames: Array, event: ResultEvent): void {
				roamer.resetHistory();
				roamer.resetShowHide();
				roamer.xmlNames = xmlNames;
                /*
                _nodeList = XMLList(XML(event.result));
                roamer.dataProvider = XML(_nodeList.toXMLString());
                */
                _nodeList = XML(event.result);
                roamer.dataProvider = _nodeList;
			}

			private function updateData(event: ResultEvent): void {
                /*
                _nodeList.appendChild(XML(event.result));
                */
                var mylist:XMLList = XMLList(event.result);
                var nodelist:XMLList = mylist.Node;
                var edgelist:XMLList = mylist.Edge;
                for each (var item:XML in nodelist) {
                    var id:String = item.@id;
                    if (roamer.dataProvider.find(id)==null) {
                        _nodeList.appendChild(item);
                    }
                };
                for each (var edge:XML in edgelist) {
                    _nodeList.appendChild(edge);
                };
                /*
                _history = roamer.history;
                */
                roamer.setDataProvider(_nodeList, _currentItemID);
                /*
                for (var i:int=0; i<_history.length; i++) {
                    var histitem:Item = _history[i];
                    if (histitem!=null) {
                        var histid:String = histitem.id;
                        log(histid);
                        var curitem:Item = roamer.dataProvider.find(histid);
                        if (curitem!=null) {
                            roamer.showItem(curitem);
                        }
                    }
                }
                */
			}
			
			public function itemDoubleClick(event: Event): void {
                if (roamer.dataProvider.numLinks(event.currentTarget.data)<=1) {
                    _nextItemName = event.currentTarget.data.data.@prop;
                    _currentItemID = event.currentTarget.data.data.@id;
                    moreData.send()
                } else {
                    roamer.currentItem = event.currentTarget.data;
                }
			}
		

		]]>
	</mx:Script>
</mx:Application>
