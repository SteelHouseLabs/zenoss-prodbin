<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" xmlns:local="*"
    width="100"
    height="70"
	backgroundColor="0xffffff"
	backgroundAlpha="0"
    creationComplete="creationComplete()"
	filters="{calcFilters(app().roamer.currentItem, data as Item)}">	
	
    <local:Circle id="circle" x="15" y="0"/>
    <mx:Image id="img1" source="/zport/dmd/img/icons/{data.data.@icon}"
        horizontalAlign="center"
        verticalAlign="center"
        x="23" y="0" height="55" width="54"/>
	<mx:Label fontSize="10" fontWeight="bold" text="{data.data.@prop}"
        height="20"
        x="5" y="50" color="#000000" width="90" selectable="false"
        textAlign="center"/>	

	<mx:Script>
		<![CDATA[
			import mx.effects.Glow;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import mx.core.Application;

			private var created: Boolean = false;

			public function doubleClick(event: Event): void {
				app().itemDoubleClick(event);
			}
			
			private function app(): ZenNetMap {
				return Application.application as ZenNetMap;
			}

            private function applyData(): void {
                var color:int=data.data.@color;
                app().log(color as String);
                circle.color = color;
            }

			private function creationComplete(): void {
				created = true;
				if(data != null)
					applyData();
			}
			
			private function calcFilters(currentItem: Item, item: Item): Array {
				if(app().roamer.currentItem == item) {
					return [new GlowFilter(0xFFFF00, 0.0, 8, 8, 2, 1, false, false)];
				} else if(app().roamer.hasBeenCurrentItem(item)) {
					return [new GlowFilter(0x0000FF, 0.0, 6, 6, 2, 1, false, false)];
				} else {
					return null;
				}
			}
			
			/* This function gets called whenever the graph's current item changes,
			 * or when our data changes, to calculate a color based on our distance
			 * from the current item. 
			 */
			 /* backgroundColor="{calcColor(app().roamer.currentItem, data as Item)}"
			 
			private function calcColor(currentItem: Item, item: Item): int {
				switch (app().roamer.distance(currentItem, item)) {
					case 0:
						return 0x5555ee;
					//default:
					case 1:
						return 0x7777bb;
					default:
						return 0x999999;
				}
			}
			*/
		]]>
	</mx:Script>				
</mx:Canvas>
				
