<tal:block metal:define-macro="base">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
        <link rel="shortcut icon"
              href="/zport/dmd/favicon.ico"
              type="image/x-icon"/>
        <link rel="stylesheet" type="text/css"
            href="yui/reset-fonts-grids/reset-fonts-grids.css"/>
        <link rel="stylesheet" type="text/css"
            href="/zport/dmd/yui/assets/skins/sam/skin.css"/>
        <link rel="stylesheet" type="text/css" 
            href="extjs/resources/css/ext-all.css"/>
        <link rel="stylesheet" type="text/css"
            href="/zport/quickstart.css"/>
        <style tal:condition="python:here.dmd.getProductName()!='core'">
            html {background-color:#eae9dc} 
            #header {background-image:url('zent-img/metalbg.gif')}
        </style>
        <script type="text/javascript" src="extjs/adapter/ext/ext-base.js"></script>
        <script type="text/javascript" src="extjs/ext-all.js"></script>
    </head>
    <body><div class="yui-skin-sam">

        <div id="header">
            <div class="logo"></div>
            <div id="header-extra">
                <tal:block metal:define-slot="username">
                </tal:block>
            </div>
        </div>
        <div id="content-wrapper">
            <div id="content"> 
            <h1><tal:block metal:define-slot="headline"/></h1>
            <h2><tal:block metal:define-slot="subheadline"/></h2>
                <tal:block metal:define-slot="content"/> </div>

            <div id="buttons">
                <tal:block metal:define-slot="buttons">
                    <div style="float:left;">
                    <input type="button" value="< Previous"/>
                    <input type="button" value="Next >"/>
                    </div><div style="float:right;">
                    <input type="button" value="Skip To Dashboard"/>
                </tal:block>
            </div>
        </div>
        <div id="footer">&copy; 2009 Zenoss, Inc.</div>


    </div> 
    <script metal:define-slot="extra-scripts">


    </script>
    </body>
</html>
</tal:block>

<tal:block metal:define-macro="deviceAdd">
<style>
    h3.listitem_master { float:left; color: #222; font-weight: normal}
    span.listitem_detail {float:right; color: #666}
</style>
<div id="tabcontrol" style="margin-bottom: 1em;">
    <span style="margin-right:2em;">
    <input type="radio" id="manualradio" checked name="tabselect"/>
    Manually find devices
    </span>
    <input type="radio" id="autoradio" name="tabselect"/> Autodiscover devices
</div>
<hr/>
<div id="deviceadd_tabs"></div>
<script tal:content="string:
    var DEFAULT_SNMPCOMMUNITIES = ${view/default_communities};
    var DEVICE_TYPES = ${view/device_types};
"></script>
<script type="text/javascript">
    Ext.onReady(function(){

        Ext.QuickTips.init();
        Ext.form.Field.prototype.msgTarget = 'side';

        Ext.apply(Ext.form.VTypes, {
            iprangeOrNetwork: function(val, field) {
                return (val.match(/^(\d+\.){3}\d+\-\d+/) || 
                        val.match(/^(\d+\.){3}\d+\/\d+/));
            },
            iprangeOrNetworkText: "Please enter a valid IP range or " +
                                  "<br/>network with subnet mask.<br/>"+
                                  "e.g., 10.1.1.1-50  or 10.1.1.1/24"
        });

        var netFieldConfig = {
            width: '80%',
            inputType: 'text',
            name: 'network',
            allowBlank: true,
            vtype: 'iprangeOrNetwork'
        }

        var devFieldConfig = {
            width: '80%',
            inputType: 'text',
            name: 'device',
            allowBlank: true,
            enableKeyEvents: true,
            listeners: {
                'blur': function(ob) {
                  ob.getEl().parent().parent().removeClass('selected_row');
                },
                'focus': function(ob){
                    ob.getEl().parent().parent().addClass('selected_row');
                    idx = Ext.getCmp('devices').items.indexOf(ob);
                    Ext.getCmp(
                        'manual_creds').layout.setActiveItem(idx);
                },
                'valid': function(ob) {
                    idx = Ext.getCmp('devices').items.indexOf(ob);
                    cmp = Ext.getCmp('credstitle_' + idx);
                    if (cmp) cmp.body.update(ob.getValue() + ' Details');
                }
            }
        }

        var autodiscover = new Ext.FormPanel({
            bodyStyle: 'padding:5px 5px 0',
            id: 'autodiscoverform',
            frame: false,
            border: false,
            layout: 'column',
            width: '100%',
            defaults: {autoHeight: true, 
                       columnWidth:0.5,
                       layout: 'form', 
                       frame:false, 
                       border:false},
            items: [{
                items: [
                    new Ext.form.FieldSet({
                        id: 'networks',
                        autoHeight: true,
                        title: 'Networks/Ranges',
                        layout: 'form',
                        bodyStyle: 'padding:0',
                        hideLabels: 'true',
                        anchor:'100%',
                        frame: false,
                        border: false,
                        defaultType: 'textfield',
                        // Don't autodestroy, so we can remove/add 
                        // the button easily
                        autoDestroy: false,
                        items: [
                            new Ext.Panel({
                                border:false,
                                cls: 'helptext',
                                bodyStyle: 'padding: 5px',
                                html: "Enter one or more networks (such " +
                                "as 10.0.0.0/24) or <"+"br/> IP ranges " +
                                "(such as 10.0.0.1-50)."
                            }),
                            netFieldConfig,
                            new Ext.Button({
                                id: 'add_button',
                                text: '+',
                                handler: function() {
                                    // Get the fieldset
                                    nets = Ext.getCmp('networks');
                                    // Add a new text field
                                    var field = nets.add(netFieldConfig);
                                    // pop the button and append it so it
                                    // stays on the bottom
                                    nets.add(nets.remove(
                                        Ext.getCmp('add_button')
                                    ));
                                    // Register the field with the FormPanel
                                    form = Ext.getCmp(
                                        'autodiscoverform').getForm();
                                    form.add(field);
                                    // Render the new components
                                    nets.doLayout();
                                    field.focus();
                                }
                        })]
                    })
                ]
            },{
                frame: true,
                border: true,
                bodyStyle: 'padding: 5px',
                items: [
                    new Ext.form.FieldSet({
                        id: 'netauth',
                        autoHeight: true,
                        layout: 'form',
                        anchor:'100%',
                        borderLeft: true,
                        defaults: {width: '100%'},
                        title:'Authentication',
                        frame: false,
                        border: false,
                        defaultType: 'textfield',
                        items: [
                            new Ext.Panel({
                                border:false,
                                cls: 'helptext',
                                style: 'font-size:1em',
                                bodyStyle:'padding:5px 0',
                                html: "Specify credentials to be used " +
                                "during the discovery process. Zenoss " +
                                "will apply these to each device it " +
                                "discovers."
                            }),
                            new Ext.Panel({
                                border:false,
                                style:'color:#666;font-weight:bold',
                                bodyStyle:'padding:5px 0',
                                html: 'Windows'
                            }),
                            new Ext.Panel({
                                border:false,
                                cls: 'helptext',
                                style: 'font-size:1em;margin-bottom:0',
                                bodyStyle:'padding-left:2em;padding-bottom:5px',
                                html: "This user must be a member of the "+
                                 "Local Administrators group."
                            }),{
                                width: 200,
                                labelStyle: 'padding-left: 20px',
                                fieldLabel: 'Username',
                                name: 'winusername'
                            },{
                                width: 200,
                                labelStyle: 'padding-left: 20px',
                                fieldLabel: 'Password',
                                inputType: 'password',
                                name: 'winpass'
                            },
                            new Ext.Panel({
                                border:false,
                                style:'color:#666;font-weight:bold',
                                bodyStyle:'padding:5px 0',
                                html: 'SSH'
                            }),{
                                width: 200,
                                labelStyle: 'padding-left: 20px',
                                fieldLabel: 'Username',
                                name: 'sshusername'
                            },{
                                width: 200,
                                labelStyle: 'padding-left: 20px',
                                fieldLabel: 'Password',
                                inputType: 'password',
                                name: 'sshpass'
                            },
                            new Ext.Panel({
                                border:false,
                                style:'color:#666;font-weight:bold',
                                bodyStyle:'padding:5px 0',
                                html: 'SNMP'
                            }), new Ext.Panel({
                                border:false,
                                cls: 'helptext',
                                style: 'font-size:1em;margin-bottom:0',
                                bodyStyle:'padding-left:2em;padding-bottom:5px;width:300px',
                                html: "Zenoss will try each of these community" +
                                 " strings in turn when connecting to the device."
                            }),{
                                width: 200,
                                xtype: 'textarea',
                                labelStyle: 'padding-left: 20px',
                                fieldLabel: 'Community Strings',
                                name: 'snmpcommunities',
                                value: DEFAULT_SNMPCOMMUNITIES
                            }
                        ]
                    })
                ]
            }]
        });

        var submit_discover = autodiscover.addButton({
            text: 'Discover',
            handler: function(){
                autodiscover.getForm().submit({url: 'auto_add'});
            }
        });

        var devtype_store = new Ext.data.Store({
            autoLoad: true,
            reader: new Ext.data.JsonReader({
                data: DEVICE_TYPES,
                root:   'types',
                fields: ['value', 'description', 'protocol', 
                         'shortdesc']
            }),
            proxy: new Ext.data.MemoryProxy(DEVICE_TYPES)
        });

        var resultTpl = new Ext.XTemplate(
                '<'+'tpl for=".">',
                '<'+'div class="x-combo-list-item blah">'+
                '<'+'h3 class="listitem_master"> {description} <'+
                '/h3><'+'span class="listitem_detail">'+
                '{protocol}<'+'/span><'+'/div>',
                '<'+'/tpl>'
        );
        
        function add_card(){
            var container = Ext.getCmp('manual_creds');
            var index = container.items.length;
            var new_card = new Ext.form.FieldSet({
                frame: false,
                border: false,
                autoHeight: true,
                labelAlign: 'right',
                labelWidth: 50,
                items: [
                    new Ext.Panel({
                        id: 'credstitle_' + index,
                        style: {
                            'font-weight': 'bold',
                            'font-size': '1.3em',
                            'color': '#666',
                            'padding-bottom':'1em'
                        },
                        html: 'Details'
                    }),
                    new Ext.form.ComboBox({
                     id: 'combobox_' + index,
                     hiddenName: 'deviceclass_' + index,
                     selectOnFocus: true,
                     width: 200,
                     lazyInit: false,
                     listWidth: 200,
                     fieldLabel: 'Device Type',
                     editable: false,
                     store: devtype_store,
                     displayField: 'shortdesc',
                     tpl: resultTpl,
                     itemSelector: 'div.blah',
                     valueField: 'value',
                     triggerAction: 'all',
                     forceSelection: true,
                     selectOnFocus: true,
                     listeners: {
                         'select': function(ob) {
                             var type = ob.value.split('_')[1];
                             var types = ['ssh', 'snmp', 'win'];
                             var container = Ext.getCmp('creds_' + index);
                             container.layout.setActiveItem(
                                 types.indexOf(type)
                             );
                         }
                     }
                    }),
                    new Ext.Panel({
                        width: 325,
                        cls: 'helptext',
                        style: 'font-size: 1em',
                        bodyStyle: 'padding-left:3em',
                        border:false,
                        html: "If your device type is not listed, use " + 
                         "the default selection. You can add devices of " +
                         "different types from the Zenoss dashboard."
                    }),
                    new Ext.Panel({
                        layout: 'card',
                        id: 'creds_' + index,
                        autoHeight: true,
                        defaults: {autoHeight: true},
                        items: [
                            new Ext.form.FieldSet({
                                defaults: {width:'90%'},
                                border: false,
                                id: 'ssh_' + index,
                                title: 'SSH Credentials',
                                defaultType: 'textfield',
                                items:[{
                                    name: 'sshuser_' + index,
                                    fieldLabel: 'Username'
                                },{
                                    name: 'sshpass_' + index,
                                    inputType: 'password',
                                    fieldLabel: 'Password'
                                }]
                            }),
                            new Ext.form.FieldSet({
                                defaults: {width:'90%'},
                                border: false,
                                id: 'snmp_' + index,
                                title: 'SNMP Credentials',
                                items: [
                                new Ext.Panel({
                                    border:false,
                                    cls: 'helptext',
                                    style: 'font-size:1em;margin-bottom:0',
                                    bodyStyle:'padding-left:3em;padding-bottom:5px',
                                    html: "Zenoss will try each of these community" +
                                     " strings in turn when connecting to the device."
                                }),{
                                    xtype: 'textarea',
                                    fieldLabel: 'Community Strings',
                                    name: 'snmpcomm_' + index,
                                    value: DEFAULT_SNMPCOMMUNITIES
                                }]

                            }),
                            new Ext.form.FieldSet({
                                defaults: {width:'90%'},
                                id: 'win_' + index,
                                border: false,
                                title: 'Windows Credentials',
                                defaultType: 'textfield',
                                items:[
                                new Ext.Panel({
                                    border:false,
                                    cls: 'helptext',
                                    style: 'font-size:1em;margin-bottom:0',
                                    bodyStyle:'padding-left:2em;padding-bottom:5px',
                                    html: "This user must be a member of the "+
                                     "Local Administrators group."
                                }),{
                                    name: 'winuser_' + index,
                                    fieldLabel: 'Username'
                                },{
                                    name: 'winpass_' + index,
                                    inputType: 'password',
                                    fieldLabel: 'Password'
                                }]
                            })
                        ]
                    })
                ]
            });
            card = container.add(new_card);
            container.doLayout();
            combobox = Ext.getCmp('combobox_' + index);
            combobox.store.load();
            combobox.setValue('/Server/Linux_snmp');
            combobox.fireEvent('select', combobox);
        }

        function addDeviceRow() {
            // Get the fieldset
            devs = Ext.getCmp('devices');
            // Add a new text field
            var idx = devs.items.length - 1;
            config = Ext.apply(devFieldConfig, {name:'device_' + idx});
            var field = devs.add(config);
            // pop the button and append it so it
            // stays on the bottom
            devs.add(devs.remove(
                Ext.getCmp('dev_add_button')
            ));
            // Register the field with the FormPanel
            form = Ext.getCmp('manualdiscoverform').getForm();
            form.add(field);
            // Render the new components
            devs.doLayout();
            add_card();
            field.focus();
        }

        var manualdiscover = new Ext.FormPanel({
            bodyStyle: {'padding': '5px 5px 0'},
            id: 'manualdiscoverform',
            frame: false,
            border: false,
            layout: 'column',
            width: '100%',
            height: 300,
            autoHeight: true,
            defaults: {
                autoHeight: true,
                columnWidth: 0.5,
                layout: 'form',
                frame: false,
                border: false
            },
            items: [{
                bodyStyle: {'padding': '5px 5px 0'},
                items: [
                new Ext.form.FieldSet({
                    id: 'devices',
                    autoHeight: true,
                    title: 'Hostnames/IP Addresses',
                    layout: 'form',
                    hideLabels: 'true',
                    anchor: '100%',
                    frame: false,
                    border: false,
                    defaultType: 'textfield',
                    autoDestroy: false,
                    items: [
                        new Ext.Panel({
                            cls: 'helptext',
                            border: false,
                            html: 'Enter a hostname or IP address' +
                                  ' for each device you want to add.'
                        }),
                        new Ext.Button({
                            id: 'dev_add_button',
                            text: '+',
                            handler: addDeviceRow
                        })
                    ]
                })]},{
                    autoHeight: true,
                    frame:true,
                    border:true,
                    items: [{
                        // Right column
                        layout: 'card',
                        id: 'manual_creds',
                        autoHeight: true,
                        frame:false,
                        border:false,
                        defaults: { labelWidth:100},
                        activeItem: 0,
                        items:[

                        ]
                    }]
                }]
        });

        var submit_manual = manualdiscover.addButton({
            text: 'Submit',
            handler: function(){
                manualdiscover.getForm().submit({url:'manual_add'});
            }
        });

        var tabpanel = new Ext.TabPanel({
            cls: 'x-tab-hide',
            width: '100%',
            renderTo: 'deviceadd_tabs',
            activeTab: 0,
            border: false,
            plain: true,
            autoHeight: true,
            defaults:{autoHeight: true},
            items: [{
                id: 'manualtab',
                title: 'Manual Add',
                items: [manualdiscover]
            },{
                id: 'autotab',
                title: 'Autodiscovery',
                items: [autodiscover]
            }]
        });

        // I don't get why we have to call this explicitly, but otherwise
        // the stuff in the tab doesn't render.
        function renderTab(tab){tab.doLayout()}
        Ext.getCmp('manualtab').on('activate', renderTab);
        Ext.getCmp('autotab').on('activate', renderTab);

        // Draw it!
        tabpanel.render();

        addDeviceRow();

        // Redirection for the forms
        autodiscover.on({'actioncomplete':
            function(form, action) {
                var url = action.result.redirect;
                if (url && action.result.success)  
                    location.href = url;
            }
        });

        manualdiscover.on({'actioncomplete':
            function(form, action) {
                var url = action.result.redirect;
                if (url && action.result.success)  
                    location.href = url;
            }
        });

        Ext.get('manualradio').on('focus', function(){tabpanel.activate(0)});
        Ext.get('autoradio').on('focus', function(){tabpanel.activate(1)});

        Ext.get('manualradio').dom.checked = true;

    });

</script>
</tal:block>
