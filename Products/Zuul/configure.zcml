<!--
###########################################################################
#
# This program is part of Zenoss Core, an open source monitoring platform.
# Copyright (C) 2009, Zenoss Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# For complete information please visit: http://www.zenoss.com/oss/
#
###########################################################################
-->

<configure xmlns="http://namespaces.zope.org/zope"
           xmlns:five="http://namespaces.zope.org/five">

    <five:implements 
        interface=".interfaces.IProcessEntity"
        class="Products.ZenModel.OSProcessClass.OSProcessClass"
        />

    <five:implements 
        interface=".interfaces.IComponent"
        class="Products.ZenModel.OSComponent.OSComponent"
        />

    <five:implements 
        interface=".interfaces.IComponent"
        class="Products.ZenModel.HWComponent.HWComponent"
        />

    <five:implements 
        interface=".interfaces.IProcessEntity"
        class="Products.ZenModel.OSProcessOrganizer.OSProcessOrganizer"
        />

    <five:implements 
        interface=".interfaces.IServiceEntity"
        class="Products.ZenModel.ServiceClass.ServiceClass"
        />

    <five:implements 
        interface=".interfaces.IServiceEntity"
        class="Products.ZenModel.ServiceOrganizer.ServiceOrganizer"
        />

    <five:implements 
        interface=".interfaces.IEventEntity"
        class="Products.ZenEvents.ZEvent.ZEvent"
        />

    <five:implements 
        interface=".interfaces.IDevice"
        class="Products.ZenModel.Device.Device"
        />

    <utility factory=".facades.DeviceFacade"
             provides=".interfaces.IDeviceFacade"
             name="device"
             />

    <utility factory=".facades.EventFacade"
             provides=".interfaces.IEventFacade"
             name="event"
             />

    <utility factory=".facades.ProcessFacade"
             provides=".interfaces.IProcessFacade"
             name="process"
             />

    <utility factory=".facades.ServiceFacade"
             provides=".interfaces.IServiceFacade"
             name="service"
             />

    <utility factory=".facades.ZenPackFacade"
             provides=".interfaces.IFacade"
             name="zenpack"
             />

<utility factory=".facades.TemplateFacade"
         provides=".interfaces.IFacade"
         name="template"
         />

    <utility component=".utils.get_dmd"
             provides=".interfaces.IDataRootFactory"
             />

    <adapter provides=".interfaces.IUnmarshaller"
             for=".interfaces.IInfo"
             factory=".marshalling.DefaultUnmarshaller"
             />

    <adapter provides=".interfaces.IUnmarshaller"
             for=".interfaces.IProcessInfo"
             factory=".marshalling.ProcessUnmarshaller"
             />

    <adapter provides=".interfaces.IMarshaller"
             for=".interfaces.IInfo"
             factory=".marshalling.InfoMarshaller"
             />

    <adapter provides=".interfaces.IMarshaller"
             for=".interfaces.ITreeNode"
             factory=".marshalling.TreeNodeMarshaller"
             />

    <!-- Tree node adapters -->
    <adapter factory=".infos.process.ProcessNode" 
             for=".interfaces.IProcessEntity"
             provides=".interfaces.IProcessNode"/>

    <adapter factory=".infos.service.ServiceNode" 
             for=".interfaces.IServiceEntity"
             provides=".interfaces.IServiceNode"/>

    <adapter factory=".infos.device.DeviceOrganizerNode"
             for="Products.ZenModel.DeviceOrganizer.DeviceOrganizer"
             provides=".interfaces.IDeviceOrganizerNode"/>

    <adapter factory=".infos.template.TemplateNode"
             for="Products.ZenModel.RRDTemplate.RRDTemplate"
             provides=".interfaces.ITemplateNode"/>

    <adapter factory=".infos.template.TemplateLeaf"
             for="Products.ZenModel.RRDTemplate.RRDTemplate"
             provides=".interfaces.ITemplateLeaf"/>

    <adapter factory=".infos.template.DataSourceInfo"
             for="Products.ZenModel.RRDDataSource.RRDDataSource"
             provides=".interfaces.IDataSourceInfo"/>

    <adapter factory=".infos.template.DataPointInfo"
             for="Products.ZenModel.RRDDataPoint.RRDDataPoint"
             provides=".interfaces.IDataPointInfo"/>

    <adapter factory=".infos.template.ThresholdInfo"
             for="Products.ZenModel.ThresholdClass.ThresholdClass"
             provides=".interfaces.IThresholdInfo"/>

    <adapter factory=".infos.template.GraphInfo"
             for="Products.ZenModel.GraphDefinition.GraphDefinition"
             provides=".interfaces.IGraphInfo"/>

    <adapter provides=".interfaces.IInfo"
             for=".interfaces.IProcessEntity"
             factory=".infos.process.ProcessInfo"
             />

    <adapter factory=".infos.command.UserCommandInfo"
             for="Products.ZenModel.UserCommand.UserCommand"
             provides=".interfaces.IUserCommandInfo"/>

    <adapter provides=".interfaces.IInfo"
             for=".interfaces.IComponent"
             factory=".infos.component.ComponentInfo"
             />

    <adapter provides=".interfaces.IInfo"
             for="Products.ZenModel.ServiceClass.ServiceClass"
             factory=".infos.service.ServiceInfo"
             />

    <adapter provides=".interfaces.IDeviceInfo"
             for=".interfaces.IDevice"
             factory=".infos.device.DeviceInfo"
             />

    <adapter provides=".interfaces.IDeviceOrganizerInfo"
             for="Products.ZenModel.DeviceOrganizer.DeviceOrganizer"
             factory=".infos.device.DeviceOrganizerInfo"
             />

    <adapter provides=".interfaces.IInfo"
             for="Products.ZenModel.ZenModelRM.ZenModelRM"
             factory=".infos.InfoBase"
             />

    <adapter provides=".interfaces.IEventInfo"
             for=".interfaces.IEventEntity"
             factory=".infos.event.EventInfo"
             />

    <adapter provides=".interfaces.IComponentInfo"
             for="Products.ZenModel.OSComponent.OSComponent"
             factory=".infos.component.ComponentInfo"
             />

    <adapter provides=".interfaces.IComponentInfo"
             for="Products.ZenModel.HWComponent.HWComponent"
             factory=".infos.component.ComponentInfo"
             />

    <adapter provides=".interfaces.ICatalogTool"
             for="*"
             factory=".tree.CatalogTool"
             />
         
    <include package=".routers"/>
    <include package=".catalog"/>

</configure>
