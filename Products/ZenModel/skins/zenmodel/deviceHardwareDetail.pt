<tal:block metal:use-macro="here/templates/macros/page2">
<tal:block metal:fill-slot="contentPane">

<tal:block tal:define=" tabletitle string:Memory; ">
<tal:block metal:use-macro="here/zenuimacros/macros/zentable">

<tal:block metal:fill-slot="zentablecontents">

<!-- BEGIN TABLE CONTENTS -->
    <tr>
        <td class="tableheader">Memory</td>
        <td class="tablevalues" tal:content="here/hw/totalMemoryString"/>
        <td class="tableheader">Swap</td>
        <td class="tablevalues" tal:content="here/os/totalSwapString"/>
    </tr>

<!-- END TABLE CONTENTS -->

</tal:block>
</tal:block>
</tal:block>


<tal:block metal:define-macro="cpuList"
    tal:define="tableName string:cpuList;
    objects here/hw/cpus/objectValuesAll;
    tabletitle string:CPUs;
    batch python:here.ZenTableManager.getBatch(tableName,objects)">
<tal:block metal:use-macro="here/zenuimacros/macros/zentable">
<tal:block metal:fill-slot="zentablecontents">

<!-- BEGIN TABLE CONTENTS -->
    <tr>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'socket','Socket')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                        tableName,'getManufacturerName','Manufacturer')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'getProductName','Model')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'clockspeed','Speed')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'extspeed','Ext Speed')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'cacheSizeL1','L1')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'cacheSizeL2','L2')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'voltage','Volts')"/>
    </tr>
    <tal:block tal:repeat="cpu batch">
    <tr tal:define="odd repeat/cpu/odd"
        tal:attributes="class python:test(odd, 'odd', 'even')">
        <td class="tablevalues" tal:content="cpu/socket"/>
        <td class="tablevalues" 
            tal:content="structure cpu/getManufacturerLink"/>
        <td class="tablevalues" tal:content="structure cpu/getProductLink"/>
        <td class="tablevalues" tal:content="string:${cpu/clockspeed} MHz"/>
        <td class="tablevalues" tal:content="string:${cpu/extspeed} MHz"/>
        <td class="tablevalues" tal:content="string:${cpu/cacheSizeL1} KB"/>
        <td class="tablevalues" tal:content="string:${cpu/cacheSizeL2} KB"/>
        <td class="tablevalues" tal:content="string:${cpu/voltage} mV"/>
    </tr>
    </tal:block>
    <tr>
        <td colspan="8" class="tableheader" align='center'>
        <form metal:use-macro="here/zenTableNavigation/macros/navtool"></form>
        </td>
    </tr>
<!-- END TABLE CONTENTS -->

</tal:block>
</tal:block>
</tal:block>


<tal:block metal:define-macro="hardDiskList"
    tal:define="tableName string:hardDiskList;
    objects here/hw/harddisks/objectValuesAll;
    tabletitle string:Hard Disks;
    batch python:here.ZenTableManager.getBatch(tableName,objects,
                                            sortedHeader='description');"
    tal:condition="objects">
<tal:block metal:use-macro="here/zenuimacros/macros/zentable">
<tal:block metal:fill-slot="zentablecontents">

<!-- BEGIN TABLE CONTENTS -->
    <tr>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'description','Name')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                            tableName,'snmpindex','Snmp Index')"/>
    </tr>
    <tal:block tal:repeat="disk batch">
    <tr tal:define="odd repeat/disk/odd"
        tal:attributes="class python:test(odd, 'odd', 'even')">
      <td class="tablevalues">
          <tal:block 
           tal:content="structure python:disk.urlLink(text=disk.getId())"/>
      </td>
      <td class="tablevalues" tal:content="disk/snmpindex"/>
    </tr>
    </tal:block>
    <tr>
        <td colspan="2" class="tableheader">
        <form metal:use-macro="here/zenTableNavigation/macros/navtool"></form>
        </td>
    </tr>

<!-- END TABLE CONTENTS -->

</tal:block>
</tal:block>
</tal:block>

<tal:block
    metal:define-macro="cardList"
    tal:define="tableName string:hardDiskList;
    objects here/hw/cards/objectValuesAll;
    tabletitle string:Expansion Cards;
    batch python:here.ZenTableManager.getBatch(tableName,objects,
                                            sortedHeader='slot');"
    tal:condition="objects">
<tal:block metal:use-macro="here/zenuimacros/macros/zentable">
<tal:block metal:fill-slot="zentablecontents">

<!-- BEGIN TABLE CONTENTS -->
    <tr>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                        tableName,'slot','Slot')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                        tableName,'getManufacturerName','Manufacturer')"/>
        <th tal:replace="structure python:here.ZenTableManager.getTableHeader(
                        tableName,'getProductName','Model')"/>
    </tr>
    <tal:block tal:repeat="card batch">
    <tr tal:define="odd repeat/card/odd"
        tal:attributes="class python:test(odd, 'odd', 'even')">
        <td class="tablevalues" tal:content="card/slot"/>
        <td class="tablevalues" 
            tal:content="structure card/getManufacturerLink"/>
        <td class="tablevalues" tal:content="structure card/getProductLink"/>
    </tr>
    </tal:block>
    <tr>
        <td colspan="3" class="tableheader" align='center'>
        <form metal:use-macro="here/zenTableNavigation/macros/navtool"></form>
        </td>
    </tr>
<!-- END TABLE CONTENTS -->

</tal:block>
</tal:block>
</tal:block>

</tal:block>
</tal:block>

