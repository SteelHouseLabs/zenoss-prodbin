<span metal:define-macro="breadCrumbs"
    tal:repeat="crumbinfo here/breadCrumbs" tal:omit-tag="">
    /<a target="rightFrame" class="tabletitle" 
        href="_" tal:attributes="href python:crumbinfo[0]"
        tal:content="python: crumbinfo[1]">link</a>
</span>

<tr><th class=tabletitle align=left 
        tal:attributes="colspan colspan | python:5"
        metal:define-macro="reportBreadCrumbs">
    <span metal:define-macro="reportBreadCrumbsList"
        tal:repeat="crumbinfo template/breadCrumbs" tal:omit-tag="">
        /<a target="rightFrame" class="tabletitle" 
            href="_" tal:attributes="href python:crumbinfo[0]"
            tal:content="python: crumbinfo[1]">link</a>
    </span>
</th></tr>

<form metal:define-macro="navtool" class="tableheader"
    action="_" method="POST" tal:attributes="action request/URL"
    tal:define="totalobjs python:here.scGetSortedTableState(tableName,
                                                           'totalobjs')"
    tal:condition="python: totalobjs > 3 
        or here.scGetSortedTableState(tableName, 'filter')">
   
    <input type='hidden' name='tableName' value="_"
        tal:attributes="value tableName">
    Number
    <span tal:replace="python:here.scGetSortedTableState(tableName,'start')+1"/>
    of
    <span tal:replace="totalobjs"/>
    &nbsp; &nbsp;
    <span tal:replace="structure python:here.scSortedTableNavigation(
                                tableName, totalobjs, batch)"/>
    &nbsp; &nbsp; 
    Filter
    <input class="tableheader" type="text" name="filter" size=10 value="_"
        tal:attributes="value python: here.scGetSortedTableState(tableName,
                                                                'filter')">
    &nbsp; &nbsp; 
    Page Size
    <input class="tableheader" type="text" name="batchSize:int" size=3 value=20
        tal:attributes="value python: here.scGetSortedTableState(tableName,
                                                                'batchSize')">
    <input class=tableheader type="submit" name="submit" value="ok" img="_"
        tal:attributes="src python:here.absolute_url()+'/transimg.gif'"/>
</form>


<script metal:define-macro="popupwindow" language="JavaScript">
<!--
function popupwindow(url, title, width, height) {
    windowprops = "width=" + width + ",height=" + height 
        + ",resizable=yes,scrollbars=yes";
    mywindow = window.open(url, title, windowprops);
}
//-->
</script>


<script metal:define-macro="submitAction" language="JavaScript">
<!--
function submitAction(myform, url) {
    myform.action=url
    myform.submit()
}
//-->
</script>


<span metal:define-macro="getProducts">
<script type="text/javascript" src="/zport/portal_skins/zenmodel/init.js">
</script>
<script type="text/javascript" src="/zport/portal_skins/zenmodel/urllib.js">
</script>
<script type="text/javascript" src="/zport/portal_skins/zenmodel/xml.js">
</script>
<script type="text/javascript" src="/zport/portal_skins/zenmodel/xmlrpc.js">
</script>
<script type="text/javascript">
<!--
/**
 * Load the xmlrpc object and a proxy to the service
 */
var xmlrpc = null;
var server = null;

try{
    var xmlrpc = importModule("xmlrpc");
    var server = new xmlrpc.ServerProxy('/zport/dmd/Companies', 
                    ['getProductNames']);
}catch(e){
    reportException(e);
    throw "importing of xmlrpc module failed.";
}

/**
 * Delete the value in the first box and put the result of the XML-RPC
 * call into the second
 */
function getProducts(compsel){
    var cname = compsel.options[compsel.selectedIndex].value
    var prodsel = document.getElementById("model");
    resp = server.getProductNames(cname);
    if (resp) {
        prodsel.options.length = 0;
        for (var i = 0; i < resp.length; i++) {
            prodsel.options[i] = new Option(resp[i], resp[i],
                                            false, false);
        }
    }
}
//-->
</script>
</span>


<script type="text/javascript" metal:define-macro="toggle">
<!-- 

isSelected = false;

function toggleSelect(form) {
    if (isSelected == false) {
        for (i = 0; i < form.length; i++)
            if (form.elements[i].name == "negateFilter") { continue }
            form.elements[i].checked = true ;
        isSelected = true;
        form.SelectButton.value = "Deselect All";
        return isSelected;
    }
    else {
        for (i = 0; i < form.length; i++)
            if (form.elements[i].name == "negateFilter") { continue }
            form.elements[i].checked = false ;
        isSelected = false;
        form.SelectButton.value = "Select All";
        return isSelected;       
    }
}

//-->
</script>


