#!/usr/bin/env python
import sys
from os import path
import tempfile
import optparse
import subprocess

import Globals
from Products.ZenUtils.Utils import zenPath
from Products.ZenUtils.GlobalConfig import getGlobalConfiguration


def get_config(database=None):
    _global_conf = getGlobalConfiguration()
    if database:
        _global_conf['zodb-db'] = database
    zodb_socket = _global_conf.get('zodb-socket')
    if zodb_socket:
        _global_conf['socket-option'] = 'unix_socket %s' % zodb_socket
    else:
        _global_conf['socket-option'] = ''

    config = """
<relstorage>
    pack-gc true
    keep-history false
    <mysql>
        host %(zodb-host)s
        port %(zodb-port)s
        db %(zodb-db)s
        user %(zodb-user)s
        passwd %(zodb-password)s
        %(socket-option)s
    </mysql>
</relstorage>
""" % _global_conf
    return config


def pack_database(config):
    """
    Write the config file and call zodbpack
    """
    with tempfile.NamedTemporaryFile() as configfile:
        configfile.write(config)
        configfile.flush()
        cmd = [zenPath('bin', 'zodbpack'), configfile.name, '-d', options.days]
        return subprocess.call(cmd)


def get_session_database():
    """
    Read the value of the session database from
    $ZENHOME/etc/zodb_db_session.conf
    """
    session_conf = zenPath('etc', 'zodb_db_session.conf')
    if not path.isfile(session_conf):
        return None

    with open(session_conf) as f:
        dbline = filter(lambda a: (a.strip().startswith('db')), f.readlines())
        if dbline:
            return dbline[0].split()[1]


if __name__ == "__main__":
    # Get the days option to forward to zodbpack
    parser = optparse.OptionParser(description=__doc__,
        usage="%prog [options]")
    parser.add_option("-d", "--days", dest="days", default="0",
                      help="Days of history to keep (default 0)")
    parser.add_option("-e", "--exclude-db", dest="excludeDB", type="choice",
                      choices=['session', 'zodb'],
                      help="Specify which database to exclude")

    options, args = parser.parse_args(sys.argv[1:])

    retcode = 1

    if options.excludeDB != 'zodb':
        # pack the main database
        retcode = pack_database(get_config())
    else:
        print "Skipping zodb"

    if options.excludeDB != 'session':
        # pack the session database
        sessiondb = get_session_database()
        if sessiondb:
            retcode = max(retcode, pack_database(get_config(sessiondb)))
    else:
        print "Skipping zodb session"

    sys.exit(retcode)
