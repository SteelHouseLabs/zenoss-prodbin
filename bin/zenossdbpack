#!/usr/bin/env python
##############################################################################
#
# Copyright (C) Zenoss, Inc. 2011, all rights reserved.
#
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
#
##############################################################################

"""Zenoss ZODB storage packing utility.
"""

import sys
from os import path
import tempfile
import argparse
import subprocess

import Globals
from Products.ZenUtils.Utils import zenPath
from Products.ZenUtils.GlobalConfig import getGlobalConfiguration


def get_config(database=None):
    _global_conf = getGlobalConfiguration()
    if database:
        _global_conf['zodb_db'] = database
    zodb_socket = _global_conf.get('zodb_socket')
    if zodb_socket:
        _global_conf['socket'] = 'unix_socket %s' % zodb_socket
    else:
        _global_conf['socket'] = ''

    config = """
<relstorage>
    pack-gc true
    keep-history false
    <mysql>
        host %(zodb_host)s
        port %(zodb_port)s
        db %(zodb_db)s
        user %(zodb_user)s
        passwd %(zodb_password)s
        %(socket)s
    </mysql>
</relstorage>
""" % _global_conf
    return config


_zodbpack = zenPath('bin', 'zodbpack')

def pack_database(config):
    """
    Write the config file and call zodbpack
    """
    with tempfile.NamedTemporaryFile() as configfile:
        configfile.write(config)
        configfile.flush()
        cmd = [_zodbpack, configfile.name, '-d', str(options.days)]
        return subprocess.call(cmd)


def get_session_database():
    """
    Read the value of the session database from
    $ZENHOME/etc/zodb_db_session.conf
    """
    session_conf = zenPath('etc', 'zodb_db_session.conf')
    if not path.isfile(session_conf):
        return None

    with open(session_conf) as f:
        dbline = filter(lambda a: (a.strip().startswith('db')), f.readlines())
        if dbline:
            return dbline[0].split()[1]


if __name__ == "__main__":
    # Get the days option to forward to zodbpack
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-d", "--days", dest="days", type=int, default=0,
        help="Days of history to keep (default: %(default)s)")
    parser.add_argument(
        "-e", "--exclude-db", dest="excludeDB",
        choices=['session', 'zodb'],
        help="Specify which database to exclude")

    options = parser.parse_args()

    retcode = 1

    if options.excludeDB != 'zodb':
        # pack the main database
        retcode = pack_database(get_config())
    else:
        print "Skipping zodb"

    if options.excludeDB != 'session':
        # pack the session database
        sessiondb = get_session_database()
        if sessiondb:
            retcode = max(retcode, pack_database(get_config(sessiondb)))
    else:
        print "Skipping zodb session"

    sys.exit(retcode)
