#!/usr/bin/env python
###########################################################################
#
# This program is part of Zenoss Core, an open source monitoring platform.
# Copyright (C) 2012, Zenoss Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 or (at your
# option) any later version as published by the Free Software Foundation.
#
# For complete information please visit: http://www.zenoss.com/oss/
#
###########################################################################

import sys
import time
import Globals
from amqplib.client_0_8.connection import Connection
from Products.ZenUtils.GlobalConfig import getGlobalConfiguration

if len(sys.argv) < 3:
    print >> sys.stderr, "Usage: zenq [count|purge|delete] <queue_name> [...]"
    sys.exit(1)

def getChannel():
    global_conf = getGlobalConfiguration()
    hostname = global_conf.get('amqphost', 'localhost')
    port     = global_conf.get('amqpport', '5672')
    username = global_conf.get('amqpuser', 'zenoss')
    password = global_conf.get('amqppassword', 'zenoss')
    vhost    = global_conf.get('amqpvhost', '/zenoss')
    ssl      = global_conf.get('amqpusessl', '0')
    use_ssl  = True if ssl in ('1', 'True', 'true') else False

    conn = Connection(host="%s:%s" % (hostname, port),
                      userid=username,
                      password=password,
                      virtual_host=vhost,
                      ssl=use_ssl)
    channel = conn.channel()
    return conn, channel

def _count(args, channel):
    queues = sys.argv[2:]
    while queues:
        to_remove = []
        for queue in queues:
            start = time.time()
            name, count, consumers = channel.queue_declare(queue, passive=True)
            print "%r,%r" % (start, count)
            if not count:
                to_remove.append(queue)
        for remove_queue in to_remove:
            queues.remove(remove_queue)
        time.sleep(1)

def _purge(args, channel):
    for queue in sys.argv[2:]:
        print "Purging queue: %s" % (queue,)
        channel.queue_purge(queue)


def _delete(args, channel):
    for queue in sys.argv[2:]:
        print "Removing queue: %s" % (queue,)
        channel.queue_delete(queue)


import argparse
parser = argparse.ArgumentParser(description="RabbitMQ utility script")
subparsers = parser.add_subparsers()

parser_count = subparsers.add_parser("count", help="Count size and connections on queue(s)")
parser_count.add_argument("queue", nargs="+", help="Name of a queue")
parser_count.set_defaults(func=_count)

parser_purge = subparsers.add_parser("purge", help="Purge the queue(s)")
parser_purge.add_argument("queue", nargs="+")
parser_purge.set_defaults(func=_purge)

parser_delete = subparsers.add_parser("delete", help="Delete the queue(s)")
parser_delete.add_argument("queue", nargs="+")
parser_delete.set_defaults(func=_delete)

args = parser.parse_args()
conn, channel = getChannel()
with conn:
    with channel:
        args.func(args, channel) # invoke the function
