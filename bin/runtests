#!/usr/bin/env python

import os, sys
from subprocess import call
import optparse
import time

ZENHOME = os.environ['ZENHOME']
ZOPEHOME = os.environ.get('ZOPEHOME', ZENHOME)
zenhome = lambda *args:os.path.join(ZENHOME, *args)
zopehome = lambda *args:os.path.join(ZOPEHOME, *args)

STDOUT = sys.stdout

exitcodes = []

def overrideCoreTests(results):
    """
    Check to see if a commercial skin is installed. If so, don't run the core
    tests.
    """
    commercial = False
    for result in results:
        if "Skin" in result:
            commercial=True
    if commercial:
        results.remove(zenhome('Products', 'ZenUITests'))
    return results
    

def findSeleniumTests(packages=[], regex=None):
    prods = findTestableProducts(packages, regex, testdir="tests/selenium")
    results = []
    if not regex: regex = 'testAll'
    regex += '.py'
    print prods
    for prod in prods:
        selpath = os.path.join(prod, 'tests', 'selenium', regex)
        if os.path.exists(selpath):
            results.append(selpath)
    return results

def expandPackDir(fulldir):
    dir = fulldir.rstrip('/').split('/')[-1]
    if dir.startswith('ZenPacks.zenoss.'):
        return os.path.join(fulldir, *dir.split('.')[:-1])
    return fulldir

def findZenPackDirectories():
    zenpackhome = zenhome('ZenPacks')
    dirs = []
    try:
        for item in os.listdir(zenpackhome):
            fullpath = zenhome('ZenPacks', item)
            if os.path.isdir(fullpath): 
                dirs.append(expandPackDir(fullpath))
            elif item.endswith('.egg-link'):
                f = file(fullpath) 
                dirs.append(expandPackDir(f.readline().strip()))
                f.close()
    except OSError:
        pass
    return dirs

def findTestableProducts(packages=[], regex=None, testdir='tests'):
    results = []
    for target in findZenPackDirectories() + [zenhome('Products')]:
        for root, dirs, files in os.walk(target):
            for dir in dirs:
                if packages and dir not in packages: continue
                if target.endswith('Products'):
                    if (not (dir.startswith('Zen') or 
                             dir=='DataCollector') or 
                        dir in ('ZenTestRunner')): 
                        continue
                newdir = os.path.join(root, dir)
                if 'tests' in os.listdir(newdir): 
                    if regex:
                        f = os.path.join(newdir, testdir, regex+'.py')
                        if os.path.exists(f):
                            results.append(newdir)
                    else:
                        results.append(newdir)
    results = overrideCoreTests(results)
    return results

def runSeleniumTests(packages=[], regex=None, zenoss_server=None, 
                    selenium_server=None):
    tests = findSeleniumTests(packages, regex)
    for testscript in tests:
        exitcodes.append(call([testscript, zenoss_server, selenium_server]))

def runUnitTests(packages=[], regex=None, coverage=False):
    for prod in findTestableProducts(packages, regex):
        if 'ZenUITests' in prod: continue
        python = zenhome('bin', 'python')
        zdctl = zenhome('lib', 'python', 'Zope2', 'Startup', 'zopectl.py')
        cfgfile = zenhome('etc', 'zope.conf')
        swhome = zenhome('lib', 'python')
        parts = [python, zdctl, '-C', cfgfile, 'test']
        if coverage: parts.append('--coverage')
        parts.extend(['--libdir', prod])
        if regex: parts.append(regex)
        env = os.environ.copy()
        env.update({
            'PYTHONPATH': swhome + ":" + env['PYTHONPATH'],
            'INSTANCE_HOME': zenhome(),
            'SOFTWARE_HOME': swhome
        })
        exitcodes.append(call(parts, env=env))

usage="""%prog [options] [package1 [package2]]

Run Zenoss tests against specified packages.  

Packages are the names of directories in $ZENHOME/Products. If no
packages are specified, tests will be executed against all testable
Zenoss packages.

Valid test types are:
    unit        Run unit tests and doctests.
    selenium    Run selenium tests.
    all         Run all tests.

Individual test modules may also be specified. For example, to run only
the Device tests, use:
    runtests --type unit --name testDevice ZenModel
"""

def main():

    parser = optparse.OptionParser( prog='runtests', usage=usage)
    parser.add_option('-t', '--type', 
                      help="The test types to run.", 
                      default="all")
    parser.add_option('-c', '--coverage', 
                      help="Compile coverage stats",
                      action="store_true", default=False)
    parser.add_option('-n', '--name', 
                      help="The name of a test module.")
    parser.add_option('--selenium-server', 
                      help="The server hosting the selenium jar")
    parser.add_option('--zenoss-server', help=(
                            "The Zenoss server against which"
                            " Selenium should test"))
    options, args = parser.parse_args()

    if options.type in ('unit', 'all'):
        runUnitTests(args, options.name, options.coverage)

    if options.type in ('selenium', 'all'):
        runSeleniumTests(args, options.name, options.zenoss_server,
                         options.selenium_server)


if __name__=="__main__":
    start = time.time()
    main()
    if exitcodes:
        code = max(exitcodes)
    else:
        code = 0
    sys.exit(code)

