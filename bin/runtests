#!/usr/bin/env python

import os, sys
from subprocess import call
import optparse
import time

ZENHOME = os.environ['ZENHOME']
zenhome = lambda *args:os.path.join(ZENHOME, *args)

STDOUT = sys.stdout


exitcodes = []

def findSeleniumTests(packages=[], regex=None):
    prods = findTestableProducts(packages, regex)
    results = []
    if not regex: regex = 'testAll'
    regex += '.py'
    for prod in prods:
        selpath = zenhome('Products', prod, 'tests', 'selenium', regex)
        if os.path.exists(selpath):
            results.append(selpath)
    return results

def findTestableProducts(packages=[], regex=None):
    results = []
    for root, dirs, files in os.walk(zenhome('Products')):
        for dir in dirs:
            if packages and dir not in packages: continue
            if (not (dir.startswith('Zen') or 
                     dir=='DataCollector') or 
                dir in ('ZenTestRunner', 'ZenUITests')): 
                continue
            newdir = os.path.join(root, dir)
            if 'tests' in os.listdir(newdir): 
                if regex:
                    f = os.path.join(newdir, 'tests', regex+'.py')
                    if os.path.exists(f):
                        results.append(dir)
                else:
                    results.append(dir)
    return results

def runSeleniumTests(packages=[], regex=None):
    for testscript in findSeleniumTests(packages, regex):
        exitcodes.append(call([testscript]))

def runUnitTests(packages=[], regex=None, coverage=False):
    for prod in findTestableProducts(packages, regex):
        parts = [ 'zopectl', 'test']
        if coverage: parts.append('--coverage')
        parts.extend(['--libdir', zenhome('Products', prod)])
        if regex: parts.append(regex)
        exitcodes.append(call(parts))

usage="""%prog [options] [package1 [package2]]

Run Zenoss tests against specified packages.  

Packages are the names of directories in $ZENHOME/Products. If no
packages are specified, tests will be executed against all testable
Zenoss packages.

Valid test types are:
    unit        Run unit tests and doctests.
    selenium    Run selenium tests.
    all         Run all tests.

Individual test modules may also be specified. For example, to run only
the Device tests, use:
    runtests --type unit --name testDevice ZenModel
"""

def main():

    parser = optparse.OptionParser( prog='runtests', usage=usage)
    parser.add_option('-t', '--type', 
                      help="The test types to run.", 
                      default="all")
    parser.add_option('-c', '--coverage', 
                      help="Compile coverage stats",
                      action="store_true", default=False)
    parser.add_option('-n', '--name', 
                      help="The name of a test module.")
    options, args = parser.parse_args()

    if options.type in ('unit', 'all'):
        runUnitTests(args, options.name, options.coverage)

    if options.type in ('selenium', 'all'):
        runSeleniumTests(args, options.name)


if __name__=="__main__":
    start = time.time()
    main()
    sys.exit(max(exitcodes))
