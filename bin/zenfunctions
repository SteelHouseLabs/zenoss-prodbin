##############################################################################
# 
# Copyright (C) Zenoss, Inc. 2007, all rights reserved.
# 
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
# 
##############################################################################


# Bitrock installer sets the following variables properly for the stack
# in setenv.sh.  Avoid undoing that goodness.
# NB: This should probably be refactored per MT's idea of generalizing
# setenv.sh for all artifacts.

if [ -z "$ZENOSS_BITROCK_STACK" ];then
   INSTANCE_HOME=$ZENHOME
   export INSTANCE_HOME
   if [ -d /usr/lib/zope ] ; then
      # appliance
      ZOPEHOME=/usr/lib/zope
      PYTHONPATH=$ZENHOME/lib/python:$ZOPEHOME/lib/python
   else
      # rpm / source build
      ZOPEHOME=$ZENHOME
      PYTHONPATH=$ZENHOME/lib/python
   fi
   export PYTHONPATH
fi
PYTHON=$ZENHOME/bin/python

# zensocket alternative program
PYRAW=$ZENHOME/bin/pyraw

SYBASE=$ZENHOME/sybase
export SYBASE

VARDIR=$ZENHOME/var
CFGDIR=$ZENHOME/etc

ZENPRODUCTS="ZenModel ZenHub ZenReports ZenWin ZenUtils  ZenRelations ZenStatus ZenRRD DataCollector ZenWidgets ZenEvents"

SYS=`uname`
PS="ps -eo pid"

if [ $SYS = "Darwin" -o $SYS = "FreeBSD" ]; then
    PS="ps -axo pid"
fi

CMD=$1
shift

pidFile() {
   if [ -z "$PIDFILE" ] ; then
       MONITOR=`grep '^[ 	]*monitor' $1 2>/dev/null | tr -d '\r' | tail -1 | awk '{ print $2 }'`
       if [ -z "$MONITOR" ] ; then MONITOR=localhost ; fi
       PIDFILE="$VARDIR/`basename $PRGNAME .py`-$MONITOR.pid"
   fi
   echo "$PIDFILE"
}

running() {
    PIDFILE=`pidFile $CFGFILE`
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE 2>/dev/null`
	kill -0 $PID 2>/dev/null || $PS | grep -q "^ *$PID$"
	return $?
    fi
    return 1
}

pyexec() {
    WRAPPER=$PYTHON
    if [ "$PRGNAME" = "zendisc.py" ] ; then
        WRAPPER=$PYRAW
    fi
    if [ -z "$PRGMODULE" ]; then
        PRG="$PRGHOME/$PRGNAME"
    else
        PRG="$PRGMODULE"
        MODULE_OPT="-m"
    fi
    if [ -n "$CFGFILE" ]; then
        set -- --configfile $CFGFILE "$@"
    fi
    exec $WRAPPER $MODULE_OPT $PRG "$@"

}

start() {
    PIDFILE=`pidFile $CFGFILE`
    if running; then    
        echo is already running
    else
        echo starting...
        pyexec --cycle --daemon "$@"
    fi
}

install_zenpacks()
{
    # install zenpacks listed in ${ZENHOME}/packs/.zenpacks_to_install
    if [ -z "${ZENPACK_CMD}" ]
    then
        ZENPACK_CMD="${ZENHOME}/bin/zenpack"
    fi
    PACKS_DIR="${ZENHOME}/packs"
    TO_INSTALL_FILE="${PACKS_DIR}/.zenpacks_to_install"
    AN_INSTALL_FAILED=0
    if [ -f ${TO_INSTALL_FILE} ]
    then

        # gather the pack names from the zenpacks-to-install file
        PACKNAMES=""
        while read PACKNAME
        do
            PACKNAMES="${PACKNAMES} ${PACKNAME}"
        done <${TO_INSTALL_FILE}

        # remove the zenpacks-to-install file
        rm ${TO_INSTALL_FILE}

        if [ -n "${PACKNAMES}" ]
        then
            echo "Installing the zenpacks listed in $ZENHOME/packs/.zenpacks_to_install." >&2
        fi

        # install all the zenpacks
        for PACKNAME in ${PACKNAMES}
        do
            if [ ${AN_INSTALL_FAILED} -eq 0 ]
            then
                # are there any eggs that match
                PACKGLOB="${PACKNAME}-*.egg"
                if [ -n "`find ${PACKS_DIR} -maxdepth 1 -name ${PACKGLOB}`" ]
                then
                    # use the latest version if more than one egg exists
                    PACK="`ls -1r ${PACKS_DIR}/${PACKGLOB} | head -n1`"
                    echo "Installing ${PACK}..."
                    ${ZENPACK_CMD} --install ${PACK}
                    AN_INSTALL_FAILED=$?
                    if [ ${AN_INSTALL_FAILED} -ne 0 ]
                    then
                        echo "Error: ${PACKNAME} failed to install" >&2
                    fi
                else
                    echo "Error: ${PACKNAME} not found in ${PACKS_DIR}" >&2
                    # 3 is LSB exit code meaning program is not running
                    AN_INSTALL_FAILED=3
                fi
            fi

            # the intention is to include the name of the failed pack in the 
            # zenpacks-to-install file, so this is not an elif
            if [ ${AN_INSTALL_FAILED} -ne 0 ]
            then
                echo ${PACKNAME} >>${TO_INSTALL_FILE}
            fi

        done # iterating over the pack names
    fi
    return ${AN_INSTALL_FAILED}
}

run() {
    pyexec "$@"
}

stopbase() {
    PIDFILE=`pidFile $CFGFILE`
    WATCHDOGPID=`dirname $PIDFILE`/watchdog-`basename $PIDFILE`
    KILLED=1
    echo stopping...
    # first, kill any watchdog
    if [ -f $WATCHDOGPID ] ; then
	kill -TERM `cat $WATCHDOGPID`
	KILLED=$?
	rm -f $WATCHDOGPID
    fi
    if running; then
        # kill the daemon
        PID=`cat $PIDFILE 2>/dev/null`
	if [ x"$PID" != x ] ; then
	    kill -TERM $PID
	    if [ $? -gt 0 ]; then
		rm -f $PIDFILE
		echo clearing pid file
	    fi
        fi
    else
	# probably stopped by the watchdog
        if [ "$KILLED" -ne 0 ] ; then
	   echo already stopped
        fi
    fi
}

stop() {
    # This is a placeholder for more complex shutdowns.
    stopbase
}

restart() {
    PIDFILE=`pidFile $CFGFILE`
    PID=`cat $PIDFILE 2>/dev/null`
    stop
    for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
    do
       sleep 0.75 2>/dev/null || sleep 1
       running || break
    done

    # If we still haven't stopped, warn and fail, otherwise start
    if running; then
        echo "Unable to shut down process $PID. You might need to kill it manually."
        exit 1
    else
        start "$@"
    fi
}

status() {
    PIDFILE=`pidFile $CFGFILE`
    if running; then
            echo program running\; pid=$PID
            exit 0
    else
        echo not running
        if [ -f $PIDFILE ]; then
            rm -f $PIDFILE
            exit 1
        else
            exit 3
        fi
    fi
}

help() {
    pyexec -h
}


genconf() {
    #
    # Create a suitable default configuration file
    #
    pyexec --genconf
}

genxmlconfigs() {
    #
    # Create a suitable default configuration file
    #
    pyexec --genxmlconfigs
}

debug() {
    PIDFILE=`pidFile $CFGFILE`
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE 2>/dev/null`
        echo "Sending SIGUSR1 to $PID"
        kill -s USR1 $PID 2>/dev/null || $PS | grep -q "^ *$PID$"
        return $?
    else
        echo "Unable to find process to send SIGUSR1 signal"
    fi

}

stats() {
    PIDFILE=`pidFile $CFGFILE`
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE 2>/dev/null`
        echo "Sending SIGUSR2 to $PID"
        kill -s USR2 $PID 2>/dev/null || $PS | grep -q "^ *$PID$"
        return $?
    else
        echo "Unable to find process to send SIGUSR2 signal"
    fi

}

generic() {
    case "$CMD" in
      run)
	    run "$@"
	    ;;
      start)
	    start "$@"
	    ;;
      stop)
	    stop
	    ;;
      restart)
	    restart "$@"
	    ;;
      status)
	    status
	    ;;
      help)
	    help
	    ;;
      genconf)
	    genconf
	    ;;
      genxmlconfigs)
	    genxmlconfigs
	    ;;
      debug)
	    debug "$@"
	    ;;
      stats)
            stats "$@"
            ;;
      *)
	    cat - <<HELP
Usage: $0 {run|start|stop|restart|status|help|genconf|genxmlconfigs|debug|stats} [options]

  where the commands are:

    run     - start the program but don't put it in the background.
              NB: This mode is good for debugging.

    start   - start the program in daemon mode -- running in the background,
              detached from the shell

    stop    - stop the program

    restart - stop and then start the program
              NB: Sometimes the start command will run before the daemon
                  has terminated.  If this happens just re-run the command.

    status  - Check the status of a daemon.  This will print the current
              process nuber if it is running.

    help    - display the options available for the daemon

    genconf - create an example configuration file with default settings 

    genxmlconfigs - create an XML file with default settings

    debug   - toggle the logging of daemons between Debug level and the default

    stats   - display detailed statistics of the deamon

HELP
	    exit 1
    esac
    exit $?
}

notdaemon() {
    case "$CMD" in
      run)
	    run "$@"
	    ;;
      start)
	    run "$@"
	    ;;
      help)
	    help
	    ;;
      *)
	    echo $"Usage: $0 {run|help}"
	    exit 1
    esac
    exit $?
}
